package com.zhongmei.bty.dinner.cash;import android.view.View;import android.widget.AdapterView;import android.widget.ListView;import android.widget.TextView;import com.zhongmei.yunfu.R;import com.zhongmei.bty.basemodule.discount.entity.ExtraCharge;import com.zhongmei.bty.basemodule.discount.enums.ExtraChargeCalcWay;import com.zhongmei.yunfu.context.session.core.auth.Auth;import com.zhongmei.yunfu.context.session.core.user.User;import com.zhongmei.bty.basemodule.session.support.VerifyHelper;import com.zhongmei.yunfu.ui.base.MobclickAgentFragment;import com.zhongmei.bty.basemodule.shoppingcart.DinnerShoppingCart;import com.zhongmei.bty.basemodule.shoppingcart.utils.MathManualMarketTool;import com.zhongmei.bty.basemodule.shoppingcart.utils.MathShoppingCartTool;import com.zhongmei.bty.basemodule.shoppingcart.SeparateShoppingCart;import com.zhongmei.bty.cashier.shoppingcart.ShoppingCartListener;import com.zhongmei.bty.cashier.shoppingcart.ShoppingCartListerTag;import com.zhongmei.bty.basemodule.orderdish.bean.IShopcartItem;import com.zhongmei.bty.commonmodule.database.entity.TradeInitConfig;import com.zhongmei.bty.commonmodule.database.entity.TradeTax;import com.zhongmei.yunfu.util.MobclickAgentEvent;import com.zhongmei.bty.basemodule.discount.event.ActionDinnerPrilivige;import com.zhongmei.bty.dinner.shopcart.adapter.DinnerBanlanceAdapter;import com.zhongmei.bty.basemodule.orderdish.bean.DishDataItem;import com.zhongmei.bty.basemodule.orderdish.enums.ItemType;import com.zhongmei.yunfu.db.enums.InvalidType;import com.zhongmei.yunfu.db.enums.StatusFlag;import com.zhongmei.bty.basemodule.trade.bean.TradeVo;import com.zhongmei.bty.basemodule.auth.application.DinnerApplication;import org.androidannotations.annotations.AfterViews;import org.androidannotations.annotations.Click;import org.androidannotations.annotations.EFragment;import org.androidannotations.annotations.ViewById;import java.util.ArrayList;import java.util.Arrays;import java.util.HashMap;import java.util.List;import de.greenrobot.event.EventBus;@EFragment(R.layout.dinner_pay_total_page)public class DinnerPayTotalFragment extends MobclickAgentFragment implements AdapterView.OnItemClickListener {    static final String TAG = "DinnerPayTotalFragment";    @ViewById(R.id.dinner_balance_list)    ListView listView;    @ViewById(R.id.goods_total_number)    TextView allDishCountTV;    DinnerBanlanceAdapter dinnerShopCartAdapter;    DinnerShoppingCart dinnerShoppingCart;    ShoppingCartListener listener;        private IShopcartItem lastShopcartItem = null;    @AfterViews    void initView() {        dinnerShoppingCart = DinnerShoppingCart.getInstance();        dinnerShopCartAdapter = new DinnerBanlanceAdapter(getActivity());        listView.setAdapter(dinnerShopCartAdapter);        listView.setOnItemClickListener(this);        dinnerShopCartAdapter.setShowLeftAnchor(true);        dinnerShopCartAdapter.isShowMemeberDiscount(true);    }    @Override    public void onResume() {        super.onResume();        updateData(dinnerShoppingCart.getShoppingCartDish(), dinnerShoppingCart.getOrder());        updateAllDishCount();        registerListener();    }    private void registerListener() {        listener = new ShoppingCartListener() {            @Override            public void separateOrder(List<IShopcartItem> listOrderDishshopVo, TradeVo mTradeVo) {                super.separateOrder(listOrderDishshopVo, mTradeVo);                dinnerShopCartAdapter.notifyDataSetChanged();                updateAllDishCount();            }            @Override            public void removeShoppingCart(List<IShopcartItem> listOrderDishshopVo, TradeVo mTradeVo, IShopcartItem mShopcartItem) {                super.removeShoppingCart(listOrderDishshopVo, mTradeVo, mShopcartItem);                lastShopcartItem = null;                dinnerShopCartAdapter.notifyDataSetChanged();                updateAllDishCount();            }        };        SeparateShoppingCart.getInstance().registerListener(ShoppingCartListerTag.DINNER_SPLIT_TOTAL_PAGE, listener);    }    private void updateData(List<IShopcartItem> shopcartItemList, TradeVo tradeVo) {        List<IShopcartItem> tempShopcartItemList = dinnerShoppingCart.filterDishList(shopcartItemList, true);        dinnerShopCartAdapter.updateData(tempShopcartItemList, tradeVo, false);        dinnerShopCartAdapter.notifyDataSetChanged();    }    @Override    public synchronized void onItemClick(AdapterView<?> parent, View view, int position, long id) {        DishDataItem dishDataItem = dinnerShopCartAdapter.getItem(position);        if (dishDataItem == null || dishDataItem.getBase() == null) {            return;        }                if (dishDataItem.getType() == ItemType.SINGLE_MEMO || dishDataItem.getType() == ItemType.COMBO_MEMO                || dishDataItem.getType() == ItemType.CHILD_MEMO) {            return;        }        addItemToPay(dishDataItem);    }    protected synchronized void addItemToPay(DishDataItem dishDataItem) {                        IShopcartItem item = dishDataItem.getItem();                if (lastShopcartItem != null && lastShopcartItem.getUuid().equals(item.getUuid())) {            return;        }        lastShopcartItem = item;        if (item.getInvalidType() == InvalidType.SPLIT) {            return;        }        IShopcartItem items = item.split();        if (items != null) {                        TradeVo tradeVo = dinnerShoppingCart.getOrder();                        if (tradeVo.getTradeTaxs() != null) {                List<TradeTax> newTradeTaxList = new ArrayList<>();                for (TradeTax tradeTax : tradeVo.getTradeTaxs()) {                    TradeTax newTradeTax = TradeTax.create(tradeTax);                    newTradeTax.setTradeId(SeparateShoppingCart.getInstance().getOrder().getTrade().getId());                    newTradeTaxList.add(newTradeTax);                }                SeparateShoppingCart.getInstance().getShoppingCartVo().getmTradeVo().setTradeTaxs(newTradeTaxList);            }                        List<ExtraCharge> extraChargeList = new ArrayList<>();            List<ExtraCharge> extraCharges = tradeVo.getExtraChargesOfTradePrivileges();            for (ExtraCharge extraCharge : extraCharges) {                if (extraCharge.getCalcWay() == ExtraChargeCalcWay.RATE && extraCharge.isValid()) {                    ExtraCharge copyExtraCharge = ExtraCharge.create(extraCharge);                    extraChargeList.add(copyExtraCharge);                }            }            SeparateShoppingCart.getInstance().getOrder().setExtraChargeMap(new HashMap<Long, ExtraCharge>());            SeparateShoppingCart.getInstance().addExtraCharge(extraChargeList, true, false);                        ExtraCharge serviceCharge = tradeVo.getServiceChargeOfTradePrivileges();            if (serviceCharge != null && serviceCharge.getCalcWay() == ExtraChargeCalcWay.RATE) {                if (tradeVo.getTradeInitConfigs() != null) {                    List<TradeInitConfig> newConfigList = new ArrayList<>();                    for (TradeInitConfig config : tradeVo.getTradeInitConfigs()) {                        TradeInitConfig newConfig = TradeInitConfig.create(config);                        newConfig.setTradeId(SeparateShoppingCart.getInstance().getOrder().getTrade().getId());                        newConfigList.add(newConfig);                    }                    SeparateShoppingCart.getInstance().getShoppingCartVo().getmTradeVo().setTradeInitConfigs(newConfigList);                }                ExtraCharge newServiceCharge = ExtraCharge.create(serviceCharge);                SeparateShoppingCart.getInstance().addExtraCharge(Arrays.asList(newServiceCharge), true, false);            }            SeparateShoppingCart.getInstance().addShoppingCart(items, true);        }    }    private void doSelectAllToSplit() {                List<IShopcartItem> dishList = dinnerShoppingCart.filterDishList(dinnerShoppingCart.getShoppingCartDish());        List<IShopcartItem> tempList = new ArrayList<IShopcartItem>();        if (dishList != null) {            for (IShopcartItem item : dishList) {                if (item.getInvalidType() == InvalidType.SPLIT && item.getStatusFlag() == StatusFlag.INVALID) {                    continue;                } else {                    IShopcartItem items = item.split();                    if (items != null) {                        tempList.add(items);                    }                }            }        }        if (!tempList.isEmpty()) {            SeparateShoppingCart.getInstance().batchAddShoppingCart(dinnerShoppingCart.getOrder(), tempList);            SeparateShoppingCart.getInstance().memberPrivilege(true, true);        }    }    @Click({R.id.btn_select, R.id.btn_ok})    void onClick(View v) {        switch (v.getId()) {            case R.id.btn_select:                MobclickAgentEvent.onEvent(getActivity(), MobclickAgentEvent.dinnerSettleSplitSelect);                VerifyHelper.verifyAlert(getActivity(), DinnerApplication.PERMISSION_DINNER_SPLIT,                        new VerifyHelper.Callback() {                            @Override                            public void onPositive(User user, String code, Auth.Filter filter) {                                super.onPositive(user, code, filter);                                doSelectAllToSplit();                            }                        });                break;            case R.id.btn_ok:                MobclickAgentEvent.onEvent(getActivity(), MobclickAgentEvent.dinnerSettleSplitSure);                MathManualMarketTool.mathMarketPlan(dinnerShoppingCart.getOrder(), dinnerShoppingCart.mergeShopcartItem(dinnerShoppingCart.getShoppingCartVo()), true, false);                                MathManualMarketTool.mathMarketPlan(SeparateShoppingCart.getInstance().getOrder(), SeparateShoppingCart.getInstance().mergeShopcartItem(SeparateShoppingCart.getInstance().getShoppingCartVo()), true, false);                MathShoppingCartTool.mathTotalPrice(dinnerShoppingCart.getShoppingCartDish(), dinnerShoppingCart.getOrder());                MathShoppingCartTool.mathTotalPrice(SeparateShoppingCart.getInstance().getShoppingCartDish(), SeparateShoppingCart.getInstance().getOrder());                hideTotalPage();                break;        }    }    private void hideTotalPage() {        ActionDinnerPrilivige actionDinnerPrilivige = new ActionDinnerPrilivige(ActionDinnerPrilivige.DinnerPriviligeType.CLOSETOTALPAGE);        EventBus.getDefault().post(actionDinnerPrilivige);    }        private void updateAllDishCount() {        if (dinnerShopCartAdapter == null) {            return;        }        dinnerShopCartAdapter.updateCountView(getActivity(), allDishCountTV);    }    @Override    public void onDestroy() {        if (listener != null) {            SeparateShoppingCart.getInstance().unRegisterListenerByTag(ShoppingCartListerTag.DINNER_SPLIT_TOTAL_PAGE);        }        super.onDestroy();    }}