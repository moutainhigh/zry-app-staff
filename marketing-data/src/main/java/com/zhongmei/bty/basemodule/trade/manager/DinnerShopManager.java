package com.zhongmei.bty.basemodule.trade.manager;import android.app.Activity;import android.net.Uri;import android.support.v4.app.FragmentActivity;import android.support.v4.app.FragmentManager;import android.text.TextUtils;import android.util.Log;import android.view.View;import com.zhongmei.bty.basemodule.auth.permission.manager.AuthLogManager;import com.zhongmei.bty.basemodule.customer.manager.CustomerManager;import com.zhongmei.bty.basemodule.devices.mispos.data.EcCard;import com.zhongmei.bty.basemodule.discount.bean.CouponPrivilegeVo;import com.zhongmei.bty.basemodule.discount.bean.WeiXinCouponsVo;import com.zhongmei.bty.basemodule.discount.entity.ExtraCharge;import com.zhongmei.bty.basemodule.inventory.bean.InventoryInfo;import com.zhongmei.bty.basemodule.inventory.utils.InventoryCacheUtil;import com.zhongmei.bty.basemodule.orderdish.bean.DishDataItem;import com.zhongmei.bty.basemodule.orderdish.bean.IShopcartItem;import com.zhongmei.bty.basemodule.orderdish.bean.IShopcartItemBase;import com.zhongmei.bty.basemodule.orderdish.bean.SetmealShopcartItem;import com.zhongmei.bty.basemodule.orderdish.bean.ShopcartItem;import com.zhongmei.bty.basemodule.orderdish.bean.TradeItemVo;import com.zhongmei.bty.basemodule.orderdish.enums.ItemType;import com.zhongmei.bty.basemodule.shoppingcart.DinnerShoppingCart;import com.zhongmei.bty.basemodule.shoppingcart.SeparateShoppingCart;import com.zhongmei.bty.basemodule.shoppingcart.listerner.ShoppingAsyncListener;import com.zhongmei.bty.basemodule.trade.bean.TradeVo;import com.zhongmei.bty.basemodule.trade.event.ActionCloseOrderDishActivity;import com.zhongmei.bty.basemodule.trade.message.TradeResp;import com.zhongmei.bty.commonmodule.database.entity.InitSystem;import com.zhongmei.bty.commonmodule.database.entity.TradeInitConfig;import com.zhongmei.bty.commonmodule.database.entity.TradeTax;import com.zhongmei.bty.commonmodule.database.enums.OrderActionEnum;import com.zhongmei.yunfu.bean.req.CustomerResp;import com.zhongmei.yunfu.context.base.BaseApplication;import com.zhongmei.yunfu.context.util.DateTimeUtils;import com.zhongmei.yunfu.context.util.Utils;import com.zhongmei.yunfu.data.R;import com.zhongmei.yunfu.db.IEntity;import com.zhongmei.yunfu.db.entity.dish.DishProperty;import com.zhongmei.yunfu.db.entity.dish.DishShop;import com.zhongmei.yunfu.db.entity.trade.Trade;import com.zhongmei.yunfu.db.entity.trade.TradeCustomer;import com.zhongmei.yunfu.db.entity.trade.TradeExtra;import com.zhongmei.yunfu.db.entity.trade.TradeItem;import com.zhongmei.yunfu.db.entity.trade.TradeTable;import com.zhongmei.yunfu.db.enums.Bool;import com.zhongmei.yunfu.db.enums.CustomerType;import com.zhongmei.yunfu.db.enums.InvalidType;import com.zhongmei.yunfu.db.enums.StatusFlag;import com.zhongmei.yunfu.db.enums.TradePayStatus;import com.zhongmei.yunfu.net.volley.VolleyError;import com.zhongmei.yunfu.orm.DBHelperManager;import com.zhongmei.yunfu.orm.DataDistributionCenter;import com.zhongmei.yunfu.orm.DatabaseHelper;import com.zhongmei.yunfu.resp.EventResponseListener;import com.zhongmei.yunfu.resp.ResponseListener;import com.zhongmei.yunfu.resp.ResponseObject;import com.zhongmei.yunfu.resp.UserActionEvent;import com.zhongmei.yunfu.ui.view.CommonDialogFragment;import com.zhongmei.yunfu.util.DialogUtil;import com.zhongmei.yunfu.util.ToastUtil;import java.math.BigDecimal;import java.util.ArrayList;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Set;import java.util.Stack;import de.greenrobot.event.EventBus;public class DinnerShopManager {    private static final String TAG = "DinnerShopManager";    private static DinnerShopManager dinnerShopManager;    private static final Uri URI_TRADE = DBHelperManager.getUri(Trade.class);        private boolean isSepartShopCart = false;    private Stack<ShoppingAsyncListener> asyncStack;    private DataDistributionCenter.DataCallback callback;    private Map<String, Integer> localPrepayPrintCount = new HashMap<>();    public static DinnerShopManager getInstance() {        if (dinnerShopManager == null) {            dinnerShopManager = new DinnerShopManager();        }        return dinnerShopManager;    }    public void _register(ShoppingAsyncListener listener) {        if (callback == null) {            callback = new TradeChangeCallback();            DataDistributionCenter.register(callback);        }        if (asyncStack == null) {            asyncStack = new Stack<ShoppingAsyncListener>();        }        asyncStack.push(listener);    }    public void _unRegisterObserver() {        if (callback != null) {            DataDistributionCenter.unregister(callback);            asyncStack.clear();            asyncStack = null;            callback = null;        }    }    public void _unRegisterListener(ShoppingAsyncListener listener) {        if (asyncStack != null) {            asyncStack.remove(listener);        }    }    class TradeChangeCallback implements DataDistributionCenter.DataCallback {        @Override        public <T extends IEntity<?>> void onTradeChange(List<T> entityList) {            TradeVo tradeVo = DinnerShoppingCart.getInstance().getOrder();            if (tradeVo == null || tradeVo.getTrade() == null) {                return;            }            for (T entity : entityList) {                Trade newTrade = (Trade) entity;                if (tradeVo.getTrade().getId() != null) {                    if (!newTrade.getServerUpdateTime().equals(tradeVo.getTrade().getServerUpdateTime())                            && !newTrade.getDeviceIdenty().equalsIgnoreCase(BaseApplication.sInstance.getDeviceIdenty())                            && (newTrade.getId().equals(tradeVo.getTrade().getId()))                            ) {                    }                } else {                    if (newTrade == null) {                        return;                    }                    DatabaseHelper helper = null;                    try {                                                if (newTrade.getId() != null && newTrade.getUuid().equals(tradeVo.getTrade().getUuid())) {                            helper = DBHelperManager.getHelper();                            List<TradeTable> tradeTableList =                                    helper.getDao(TradeTable.class).queryForEq(TradeTable.$.tradeId, newTrade.getId());                            TradeExtra tradeExtra = helper.getDao(TradeExtra.class)                                    .queryBuilder()                                    .where()                                    .eq(TradeExtra.$.tradeId, newTrade.getId())                                    .queryForFirst();                            List<TradeInitConfig> tradeInitConfigs = helper.getDao(TradeInitConfig.class)                                    .queryBuilder()                                    .where().eq(TradeInitConfig.$.trade_id, newTrade.getId()).and().eq(TradeInitConfig.$.statusFlag, StatusFlag.VALID).query();                            List<TradeTax> tradeTaxs = helper.getDao(TradeTax.class)                                    .queryBuilder()                                    .where().eq(TradeTax.$.tradeId, newTrade.getId()).and().eq(TradeTax.$.statusFlag, StatusFlag.VALID).query();                            if (tradeExtra == null || Utils.isEmpty(tradeTableList)) {                                return;                            }                                                        updateAsync(newTrade, tradeTableList.get(0), tradeExtra, tradeInitConfigs, tradeTaxs);                        }                    } catch (Exception e) {                        Log.e(TAG, e.getMessage(), e);                    } finally {                        if (helper != null) {                            DBHelperManager.releaseHelper(helper);                        }                    }                }            }        }        @Override        public void onChange(Set<Uri> tables, Map<Uri, List<Object>> dataMap) {        }        private void onMutltiUpdate(Trade newTrade, InitSystem initSystem) {            if (asyncStack.isEmpty()) {                return;            }                        ShoppingAsyncListener listener = asyncStack.peek();            if (listener == null) {                return;            }            String padNo = "";            if (initSystem != null && initSystem.getPadNo() != null) {                padNo = initSystem.getPadNo().toString();            }            String updatorName = newTrade.getUpdatorName();            if (TextUtils.isEmpty(updatorName)) {                updatorName = "";            }            String serverUpdate = DateTimeUtils.formatDateTime(newTrade.getServerUpdateTime(), DateTimeUtils.DATE_TIME_FORMAT3);            String updateHint = "";            if (TextUtils.isEmpty(updatorName)) {                if (TextUtils.isEmpty(padNo)) {                    updateHint = BaseApplication.sInstance.getString(R.string.dinner_multi_terminate_both_no_hint);                    updateHint = String.format(updateHint, serverUpdate);                } else {                    updateHint = BaseApplication.sInstance.getResources().getString(R.string.dinner_multi_terminate_no_updator_hint);                    updateHint = String.format(updateHint, serverUpdate, padNo);                }            } else {                if (TextUtils.isEmpty(padNo)) {                    updateHint = BaseApplication.sInstance.getResources().getString(R.string.dinner_multi_terminate_no_padno_hint);                    updateHint = String.format(updateHint, serverUpdate, updatorName);                } else {                    updateHint = BaseApplication.sInstance.getResources().getString(R.string.dinner_multi_terminate_hint);                    updateHint = String.format(updateHint, serverUpdate, updatorName, padNo);                }            }            listener.onMultiTerminalUpdate(updateHint);        }        private void updateAsync(Trade trade, TradeTable tradeTable, TradeExtra tradeExtra, List<TradeInitConfig> tradeInitConfigs, List<TradeTax> tradeTaxs) {            DinnerShoppingCart.getInstance().updateAsyncOpenTableInfo(trade,                    tradeTable, tradeExtra, tradeInitConfigs, tradeTaxs);            Iterator<ShoppingAsyncListener> iterator = asyncStack.iterator();            while (iterator.hasNext()) {                ShoppingAsyncListener listener = iterator.next();                listener.onAsyncUpdate();            }        }    }    public boolean isSepartShopCart() {        return isSepartShopCart;    }    public void setSepartShopCart(boolean separtShopCart) {        isSepartShopCart = separtShopCart;    }    public DinnerShoppingCart getShoppingCart() {        if (isSepartShopCart) {            return SeparateShoppingCart.getInstance();        } else {            return DinnerShoppingCart.getInstance();        }    }    public CustomerResp getLoginCustomer() {        if (isSepartShopCart) {            return CustomerManager.getInstance().getSeparateLoginCustomer();        } else {            return CustomerManager.getInstance().getDinnerLoginCustomer();        }    }    public void setLoginCustomer(CustomerResp customer) {        if (isSepartShopCart) {            CustomerManager.getInstance().setSeparateLoginCustomer(customer);        } else {            CustomerManager.getInstance().setDinnerLoginCustomer(customer);        }    }    public void clearCustomer() {        CustomerManager.getInstance().setSeparateLoginCustomer(null);        CustomerManager.getInstance().setDinnerLoginCustomer(null);    }    public void setLoginCustomerFromShoppingCart() {        DinnerShoppingCart shoppingCart = getShoppingCart();        if (shoppingCart.getOrder() == null) {            return;        }                List<TradeCustomer> listCustomer = shoppingCart.getOrder().getTradeCustomerList();        if (Utils.isEmpty(listCustomer)) {            return;        }        for (TradeCustomer tradeCustomer : listCustomer) {            if (tradeCustomer.getStatusFlag() != StatusFlag.VALID) {                continue;            }            if (tradeCustomer.getCustomerType() == CustomerType.MEMBER || tradeCustomer.getCustomerType() == CustomerType.CUSTOMER) {                if (tradeCustomer.getCustomerId() != null) {                    CustomerResp customer = CustomerManager.getInstance().getCustomer(tradeCustomer);                    setLoginCustomer(customer);                }                break;            } else if (tradeCustomer.getCustomerType() == CustomerType.CARD) {                EcCard card = new EcCard();                card.setCardNum(tradeCustomer.getEntitycardNum());                card.setName(tradeCustomer.getCustomerName());                card.setCustomer(CustomerManager.getInstance().getCustomerV5(tradeCustomer));                CustomerResp customer = CustomerManager.getInstance().getCustomer(tradeCustomer);                customer.card = card;                setLoginCustomer(customer);                break;            }        }    }    public boolean hasValidItems(TradeVo tradeVo) {        if (tradeVo == null || Utils.isEmpty(tradeVo.getTradeItemList())) {            return false;        }        for (TradeItemVo tradeItemVo : tradeVo.getTradeItemList()) {            TradeItem tradeItem = tradeItemVo.getTradeItem();            if (tradeItem != null && (tradeItem.getStatusFlag() == StatusFlag.VALID                    || tradeItem.getQuantity().compareTo(BigDecimal.ZERO) > 0)) {                return true;            }        }        return false;    }    public boolean hasUnactivedPrivilege(TradeVo tradeVo) {        if (tradeVo == null) {            return false;        }                if (tradeVo.getIntegralCashPrivilegeVo() != null && tradeVo.getIntegralCashPrivilegeVo().isValid()                && !tradeVo.getIntegralCashPrivilegeVo().isActived()) {            return true;        }                if (Utils.isNotEmpty(tradeVo.getCouponPrivilegeVoList())) {            for (CouponPrivilegeVo couponPrivilegeVo : tradeVo.getCouponPrivilegeVoList()) {                if (couponPrivilegeVo != null && couponPrivilegeVo.isValid()                        && !couponPrivilegeVo.isActived()) {                    return true;                }            }        }        if (isHasUnActiveGiftCoupon(tradeVo)) {            return true;        }        if (isHasUnActiveWeixinCoupon(tradeVo)) {            return true;        }        return false;    }    public boolean isHasUnActiveGiftCoupon(TradeVo tradeVo) {                if (Utils.isEmpty(tradeVo.getTradeItemList())) {            return false;        }        for (TradeItemVo tradeItemVo : tradeVo.getTradeItemList()) {            if (tradeItemVo != null && tradeItemVo.getCouponPrivilegeVo() != null                    && tradeItemVo.getCouponPrivilegeVo().isValid()                    && !tradeItemVo.getCouponPrivilegeVo().isActived()) {                return true;            }        }        return false;    }    public boolean isHasUnActiveWeixinCoupon(TradeVo tradeVo) {                if (Utils.isNotEmpty(tradeVo.getmWeiXinCouponsVo())) {            for (WeiXinCouponsVo weiXinCouponsVo : tradeVo.getmWeiXinCouponsVo()) {                if (weiXinCouponsVo != null && weiXinCouponsVo.isValid()                        && !weiXinCouponsVo.isActived()) {                    return true;                }            }        }        return false;    }    public void checkTradeIsNegative(TradeVo mTradeVo, final IShopcartItem mShopcartItem, FragmentManager fragmentManager) {        if (mTradeVo.getTrade() == null || mTradeVo.getTrade().getTradeAmount() == null) {            return;        }        if (mTradeVo.getTrade().getTradeAmount().compareTo(BigDecimal.ZERO) < 0) {            CommonDialogFragment dialogFragment = new CommonDialogFragment.CommonDialogFragmentBuilder(BaseApplication.sInstance)                    .iconType(CommonDialogFragment.ICON_WARNING)                    .title(R.string.dinner_settle_trade_negative_hint)                    .negativeText(R.string.dinner_cacel_operate)                    .positiveText(R.string.dinner_continume)                    .positiveLinstner(new View.OnClickListener() {                        @Override                        public void onClick(View v) {                                                        SeparateShoppingCart.getInstance().removeOrderPrivilege();                        }                    }).negativeLisnter(new View.OnClickListener() {                        @Override                        public void onClick(View v) {                                                        List<IShopcartItem> shopcartItemList = DinnerShoppingCart.getInstance().getShoppingCartDish();                            if (shopcartItemList != null) {                                for (IShopcartItem iShopcartItem : shopcartItemList) {                                    if (iShopcartItem.getUuid().equals(mShopcartItem.getRelateTradeItemUuid())) {                                        IShopcartItem tempShopcartItem = iShopcartItem.split();                                        SeparateShoppingCart.getInstance().addShoppingCart(tempShopcartItem, true);                                        break;                                    }                                }                            }                        }                    }).build();            dialogFragment.show(fragmentManager, "checkTradeIsNegative");        }    }    public ResponseListener<TradeResp> getSaveResponseListener(final Activity activity) {        ResponseListener<TradeResp> mSaveDataListener = new EventResponseListener<TradeResp>(UserActionEvent.DINNER_PAY_ORDER_SAVE) {            @Override            public void onResponse(ResponseObject<TradeResp> response) {                                try {                    if (ResponseObject.isOk(response)) {                        ToastUtil.showLongToast(BaseApplication.sInstance.getString(R.string.save_success));                        SeparateShoppingCart.getInstance().clearShoppingCartData();                        CustomerManager.getInstance().setSeparateLoginCustomer(null);                        EventBus.getDefault().post(new ActionCloseOrderDishActivity());                        activity.finish();                        if (response.getContent() != null && response.getContent().getTrades() != null) {                            Trade trade = response.getContent().getTrades().get(0);                            AuthLogManager.getInstance().flush(OrderActionEnum.ACTION_CHANGE_ORDER, trade.getId(), trade.getUuid(), trade.getClientUpdateTime());                        }                    } else {                        AuthLogManager.getInstance().clear();                        ToastUtil.showLongToast(response.getMessage());                    }                    UserActionEvent.end(UserActionEvent.DINNER_PAY_ORDER_SAVE);                } catch (Exception e) {                    Log.e(TAG, "", e);                }            }            @Override            public void onError(VolleyError error) {                try {                    ToastUtil.showLongToast(error.getMessage());                } catch (Exception e) {                    Log.e(TAG, "", e);                }            }        };        return mSaveDataListener;    }    public boolean isHasItems(TradeVo tradeVo, List<IShopcartItem> mListOrderDishshopVo) {        if ((mListOrderDishshopVo == null || mListOrderDishshopVo.size() == 0) && tradeVo != null                && (Utils.isEmpty(tradeVo.getCouponPrivilegeVoList()) || tradeVo.getIntegralCashPrivilegeVo() == null                || tradeVo.getTradePrivilege() == null)) {            return false;        }        return true;    }    public List<IShopcartItem> getCanDiscountData(List<IShopcartItem> mListOrderDishshopVo) {        List<IShopcartItem> canDiscountList = new ArrayList<IShopcartItem>();        if (mListOrderDishshopVo != null) {                        for (IShopcartItem item : mListOrderDishshopVo) {                if (item != null && item.getEnableWholePrivilege() == Bool.YES) {                    canDiscountList.add(item);                }            }        }        return canDiscountList;    }    public boolean isHasDefineInfo() {        if (isExtrageValid() || isCouponInvalid() || isIntegralCashInvalid()) {            return true;        }        return false;    }    public boolean isExtrageValid() {        DinnerShoppingCart shoppingCart = DinnerShopManager.getInstance().getShoppingCart();        Map<Long, ExtraCharge> extrageMap = shoppingCart.getOrder().getExtraChargeMap();        if (extrageMap == null) {            return false;        }        return true;    }        public boolean isCouponInvalid() {        DinnerShoppingCart shoppingCart = DinnerShopManager.getInstance().getShoppingCart();        List<CouponPrivilegeVo> couponPrivilegeVoList = shoppingCart.getShoppingCartVo().getmTradeVo().getCouponPrivilegeVoList();        if (Utils.isEmpty(couponPrivilegeVoList)) {            return false;        }        for (CouponPrivilegeVo couponPrivilegeVo : couponPrivilegeVoList) {            if (!couponPrivilegeVo.isActived()                    && couponPrivilegeVo.isValid()) {                return true;            }        }        return false;    }        public boolean isIntegralCashInvalid() {        DinnerShoppingCart shoppingCart = DinnerShopManager.getInstance().getShoppingCart();        if (shoppingCart.getOrder() != null && shoppingCart.getOrder().getIntegralCashPrivilegeVo() != null                && !shoppingCart.getOrder().getIntegralCashPrivilegeVo().isActived()                && shoppingCart.getOrder().getIntegralCashPrivilegeVo().isValid()                ) {            return true;        } else {            return false;        }    }    public boolean isHasUnActiveWeixinCode() {        DinnerShoppingCart shoppingCart = DinnerShopManager.getInstance().getShoppingCart();        if (shoppingCart.getOrder() != null && shoppingCart.getOrder().getmWeiXinCouponsVo() != null) {            for (WeiXinCouponsVo wx : shoppingCart.getOrder().getmWeiXinCouponsVo()) {                if (!wx.isActived() && wx.isValid()) {                    return true;                }            }        }        return false;    }    public void resetSepShopcart() {        List<IShopcartItem> shopcartItemList = SeparateShoppingCart.getInstance().getShoppingCartDish();        if (shopcartItemList != null) {            for (IShopcartItem iShopcartItem : shopcartItemList) {                DinnerShoppingCart.getInstance()                        .resetSeparateDish(iShopcartItem.getRelateTradeItemUuid());            }        }        SeparateShoppingCart.getInstance().clearShoppingCart();    }    public List<IShopcartItemBase> getAllSelectData(List<DishDataItem> selectedList) {        List<IShopcartItemBase> filterSelectedList = new ArrayList<IShopcartItemBase>();                for (DishDataItem item : selectedList) {            if (item.getType() == ItemType.SINGLE || item.getType() == ItemType.COMBO) {                if (item.getBase() != null && item.getBase().isSelected()) {                    filterSelectedList.add(item.getBase());                }            }        }        return filterSelectedList;    }    public void doReset(boolean isNeedListener) {        List<IShopcartItem> dishList = DinnerShoppingCart.getInstance().getShoppingCartDish();        if (dishList != null) {            for (IShopcartItem item : dishList) {                if (item.getStatusFlag() != StatusFlag.VALID && item.getInvalidType() == InvalidType.SPLIT) {                    DinnerShoppingCart.getInstance().resetSeparateDish(item.getUuid());                }            }        }        DinnerShoppingCart.getInstance().onlyMath();        List<IShopcartItem> spList =                SeparateShoppingCart.getInstance().getShoppingCartDish();        if (spList != null) {            for (IShopcartItem item : spList) {                SeparateShoppingCart.getInstance().removeShoppingCart(item, isNeedListener);            }        }    }    public void localPrepayPrintCountPlus(String tradeUuid) {        Integer prepayPrintCount = localPrepayPrintCount.get(tradeUuid);        if (prepayPrintCount == null) {            prepayPrintCount = 0;        }        prepayPrintCount++;        localPrepayPrintCount.put(tradeUuid, prepayPrintCount);    }    public int getLocalPrepayPrintCount(String tradeUuid) {        Integer prepayPrintCount = localPrepayPrintCount.get(tradeUuid);        if (prepayPrintCount == null) {            prepayPrintCount = 0;        }        return prepayPrintCount;    }    public void clearLocalPrepayPrintCount() {        localPrepayPrintCount.clear();    }    public static boolean isPaying(TradeVo tradeVo) {        if (tradeVo == null || tradeVo.getTrade() == null) {            return false;        }        TradePayStatus tradePayStatus = tradeVo.getTrade().getTradePayStatus();        if (tradePayStatus == TradePayStatus.PAYING || tradePayStatus == TradePayStatus.PREPAID) {            return true;        }        return false;    }    public void verifyDishInventory(FragmentActivity activity, List<ShopcartItem> shopcartItemList, final Runnable submitRunnable) {        verifyDishInventory(activity, shopcartItemList, submitRunnable, null);    }    public void verifyDishInventory(FragmentActivity activity, List<ShopcartItem> shopcartItemList, Runnable submitRunnable, Runnable cancelRunnable) {        if (!InventoryCacheUtil.getInstance().getSaleNumOpenSwitch()) {            if (submitRunnable != null) {                submitRunnable.run();            }            return;        }        boolean isRealTiemInventory = InventoryCacheUtil.getInstance().getSaleSwitch();        if (Utils.isEmpty(shopcartItemList)) {            if (submitRunnable != null) {                submitRunnable.run();                return;            }        }        Map<String, BigDecimal> dishQtyMap = new HashMap<>();        for (ShopcartItem shopcartItem : shopcartItemList) {            if (Utils.isEmpty(shopcartItem.getSetmealItems())) {                if (dishQtyMap.containsKey(shopcartItem.getSkuUuid())) {                    dishQtyMap.put(shopcartItem.getSkuUuid(), dishQtyMap.get(shopcartItem.getSkuUuid()).add(shopcartItem.getTotalQty()));                } else {                    dishQtyMap.put(shopcartItem.getSkuUuid(), shopcartItem.getTotalQty());                }            } else {                List<SetmealShopcartItem> setmealItemList = ((ShopcartItem) shopcartItem).getSetmealItems();                for (SetmealShopcartItem item : setmealItemList) {                    if (dishQtyMap.containsKey(item.getSkuUuid())) {                        dishQtyMap.put(item.getSkuUuid(), dishQtyMap.get(item.getSkuUuid()).add(item.getTotalQty()));                    } else {                        dishQtyMap.put(item.getSkuUuid(), item.getTotalQty());                    }                }            }        }        List<String> dishNameList = new ArrayList<>();        for (ShopcartItem shopcartItem : shopcartItemList) {            if (Utils.isEmpty(shopcartItem.getSetmealItems())) {                if (dishQtyMap.containsKey(shopcartItem.getSkuUuid())) {                    if (!verifySetmealItem(isRealTiemInventory, shopcartItem.getDishShop(), dishQtyMap.get(shopcartItem.getSkuUuid()))) {                        String dishName = getDishName(shopcartItem.getDishShop(), shopcartItem.getOrderDish().dish.getStandards());                        dishNameList.add(dishName);                    }                    dishQtyMap.remove(shopcartItem.getSkuUuid());                }            } else {                List<SetmealShopcartItem> setmealItemList = ((ShopcartItem) shopcartItem).getSetmealItems();                for (SetmealShopcartItem item : setmealItemList) {                    if (dishQtyMap.containsKey(item.getSkuUuid())) {                        if (!verifySetmealItem(isRealTiemInventory, item.getDishShop(), dishQtyMap.get(item.getSkuUuid()))) {                            String dishName = getDishName(item.getDishShop(), item.getOrderDish().dish.getStandards());                            dishNameList.add(dishName);                        }                        dishQtyMap.remove(item.getSkuUuid());                    }                }            }        }        if (Utils.isEmpty(dishNameList)) {            if (submitRunnable != null) submitRunnable.run();        } else {            showDishInventoryDialog(activity, dishNameList, submitRunnable, cancelRunnable);        }    }    private String getDishName(DishShop dishShop, Set<DishProperty> dishPropertySet) {        StringBuilder propertyStr = new StringBuilder();        if (dishPropertySet != null && dishPropertySet.size() > 0) {            propertyStr.append("(");            Iterator<DishProperty> setIt = dishPropertySet.iterator();            while (setIt.hasNext()) {                propertyStr.append(setIt.next().getName() + ",");            }            propertyStr.delete(propertyStr.length() - 1, propertyStr.length());            propertyStr.append(")");        }        return dishShop.getName() + propertyStr.toString();    }    private boolean verifySetmealItem(boolean isRealTiemInventory, DishShop dishShop, BigDecimal dishQuantity) {        if (isRealTiemInventory) {            InventoryInfo inventoryInfo = InventoryCacheUtil.getInstance().getInventoryNumByDishUuid(dishShop.getUuid());            if (inventoryInfo != null && inventoryInfo.getInventoryQty() != null && dishQuantity.compareTo(inventoryInfo.getInventoryQty()) == 1)                return false;            else return true;        } else {            if (dishShop.getResidueTotal() != null && dishQuantity.compareTo(dishShop.getResidueTotal()) == 1)                return false;            else return true;        }    }    private void showDishInventoryDialog(FragmentActivity fragmentActivity, List<String> dishNameList, final Runnable submitRunnable, final Runnable cancelRunnable) {        DialogUtil.showWarnConfirmDialog(fragmentActivity.getSupportFragmentManager(),                Utils.listToString(dishNameList) + fragmentActivity.getString(R.string.dinner_inventory_verify_hint),                R.string.cancel,                R.string.handover_ok,                new View.OnClickListener() {                    @Override                    public void onClick(View view) {                        if (cancelRunnable != null) cancelRunnable.run();                    }                },                new View.OnClickListener() {                    @Override                    public void onClick(View view) {                        if (submitRunnable != null) submitRunnable.run();                    }                },                ""        );    }}